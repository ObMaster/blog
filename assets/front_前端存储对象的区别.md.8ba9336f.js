import{_ as o,o as e,c as t,Q as a}from"./chunks/framework.6bbba70b.js";const _=JSON.parse('{"title":"cookie、localStorage和sessionStorage三者的区别","description":"","frontmatter":{},"headers":[],"relativePath":"front/前端存储对象的区别.md","filePath":"front/前端存储对象的区别.md","lastUpdated":null}'),r={name:"front/前端存储对象的区别.md"},c=a('<h1 id="cookie、localstorage和sessionstorage三者的区别" tabindex="-1">cookie、localStorage和sessionStorage三者的区别 <a class="header-anchor" href="#cookie、localstorage和sessionstorage三者的区别" aria-label="Permalink to &quot;cookie、localStorage和sessionStorage三者的区别&quot;">​</a></h1><blockquote><p><strong><code>cookie</code></strong>、**<code>localstorage</code><strong>和</strong><code>sessionStorage</code>**三者都是在开发中用到的临时存储客户端会话信息或者数据的方法，下面就简单介绍一下三者的区别：</p></blockquote><h2 id="一、存储的时间有效期不同" tabindex="-1">一、存储的时间有效期不同 <a class="header-anchor" href="#一、存储的时间有效期不同" aria-label="Permalink to &quot;一、存储的时间有效期不同&quot;">​</a></h2><p>1、<code>cookie</code>的有效期是可以设置的，默认的情况下是关闭浏览器后失效</p><p>2、<code>sessionStorage</code>的有效期是仅保持在当前页面，关闭当前会话页或者浏览器后就会失效</p><p>3、<code>localStorage</code>的有效期是在不进行手动删除的情况下是一直有效的</p><h2 id="二、存储的大小不同" tabindex="-1">二、存储的大小不同 <a class="header-anchor" href="#二、存储的大小不同" aria-label="Permalink to &quot;二、存储的大小不同&quot;">​</a></h2><p>1、<code>cookie</code>的存储是4kb左右，存储量较小，一般页面最多存储20条左右信息</p><p>2、<code>localStorage</code>和<code>sessionStorage</code>的存储容量是5Mb(官方介绍，可能和浏览器有部分差异性)</p><h2 id="三、与服务端的通信" tabindex="-1">三、与服务端的通信 <a class="header-anchor" href="#三、与服务端的通信" aria-label="Permalink to &quot;三、与服务端的通信&quot;">​</a></h2><p>1、<code>cookie</code>会参与到与服务端的通信中，一般会携带在http请求的头部中，例如一些关键密匙验证等。</p><p>2、<code>localStorage</code>和<code>sessionStorage</code>是单纯的前端存储，不参与与服务端的通信</p><h2 id="四、读写操作的便捷程度" tabindex="-1">四、读写操作的便捷程度 <a class="header-anchor" href="#四、读写操作的便捷程度" aria-label="Permalink to &quot;四、读写操作的便捷程度&quot;">​</a></h2><p>1、cookie的相关操作，cookie操作起来较为繁琐，并且部分数据不可以读取操作</p><p>&lt;1&gt;、cookie的创建（修改和创建相同，创建同样名称会覆盖之前的）</p><p>//JavaScript 中，创建 cookie 如下所示：<br> document.cookie=&quot;username=John Doe&quot;;<br> //您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：<br> document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;<br> //您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。<br> document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;<br> &lt;2&gt;、cookie的读取</p><p>var x = document.cookie;<br> &lt;3&gt;、cookie的删除</p><p>//删除 cookie 非常简单。您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:<br> document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;<br> 2、sessionStorage的相关操作</p><p>&lt;1&gt;、存储一条数据</p><p>sessionStorage.setItem(&#39;数据名&#39;, &#39;数据值&#39;);<br> &lt;2&gt;、读取一条数据</p><p>let data = sessionStorage.getItem(&#39;数据名&#39;);<br> &lt;3&gt;、清除一条数据</p><p>sessionStorage.removeItem(&#39;数据名&#39;);<br> &lt;4&gt;、移除所有数据</p><p>sessionStorage.clear();<br> 3、localStorage的相关操作</p><p>&lt;1&gt;、存储一条数据</p><p>localStorage.setItem(&#39;数据名&#39;, &#39;数据值&#39;);<br> &lt;2&gt;、读取一条数据</p><p>let data = localStorage.getItem(&#39;数据名&#39;);<br> &lt;3&gt;、清除一条数据</p><p>localStorage.removeItem(&#39;数据名&#39;);<br> &lt;4&gt;、移除所有数据</p><p>localStorage.clear();</p>',28),s=[c];function i(l,n,p,d,g,h){return e(),t("div",null,s)}const k=o(r,[["render",i]]);export{_ as __pageData,k as default};
